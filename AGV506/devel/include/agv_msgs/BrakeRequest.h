// Generated by gencpp from file agv_msgs/BrakeRequest.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_BRAKEREQUEST_H
#define AGV_MSGS_MESSAGE_BRAKEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_msgs
{
template <class ContainerAllocator>
struct BrakeRequest_
{
  typedef BrakeRequest_<ContainerAllocator> Type;

  BrakeRequest_()
    : brake(false)  {
    }
  BrakeRequest_(const ContainerAllocator& _alloc)
    : brake(false)  {
  (void)_alloc;
    }



   typedef uint8_t _brake_type;
  _brake_type brake;





  typedef boost::shared_ptr< ::agv_msgs::BrakeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::BrakeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct BrakeRequest_

typedef ::agv_msgs::BrakeRequest_<std::allocator<void> > BrakeRequest;

typedef boost::shared_ptr< ::agv_msgs::BrakeRequest > BrakeRequestPtr;
typedef boost::shared_ptr< ::agv_msgs::BrakeRequest const> BrakeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::BrakeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::BrakeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::BrakeRequest_<ContainerAllocator1> & lhs, const ::agv_msgs::BrakeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.brake == rhs.brake;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::BrakeRequest_<ContainerAllocator1> & lhs, const ::agv_msgs::BrakeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::BrakeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::BrakeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::BrakeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::BrakeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::BrakeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::BrakeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::BrakeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "691501d2b5eb4dc01a97397d7baf5fba";
  }

  static const char* value(const ::agv_msgs::BrakeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x691501d2b5eb4dc0ULL;
  static const uint64_t static_value2 = 0x1a97397d7baf5fbaULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::BrakeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/BrakeRequest";
  }

  static const char* value(const ::agv_msgs::BrakeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::BrakeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#request \n"
"bool brake\n"
;
  }

  static const char* value(const ::agv_msgs::BrakeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::BrakeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.brake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BrakeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::BrakeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::BrakeRequest_<ContainerAllocator>& v)
  {
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_BRAKEREQUEST_H
