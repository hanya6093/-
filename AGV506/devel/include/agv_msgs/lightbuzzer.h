// Generated by gencpp from file agv_msgs/lightbuzzer.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_LIGHTBUZZER_H
#define AGV_MSGS_MESSAGE_LIGHTBUZZER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_msgs
{
template <class ContainerAllocator>
struct lightbuzzer_
{
  typedef lightbuzzer_<ContainerAllocator> Type;

  lightbuzzer_()
    : light(0)
    , buzzer(0)  {
    }
  lightbuzzer_(const ContainerAllocator& _alloc)
    : light(0)
    , buzzer(0)  {
  (void)_alloc;
    }



   typedef uint8_t _light_type;
  _light_type light;

   typedef uint8_t _buzzer_type;
  _buzzer_type buzzer;





  typedef boost::shared_ptr< ::agv_msgs::lightbuzzer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::lightbuzzer_<ContainerAllocator> const> ConstPtr;

}; // struct lightbuzzer_

typedef ::agv_msgs::lightbuzzer_<std::allocator<void> > lightbuzzer;

typedef boost::shared_ptr< ::agv_msgs::lightbuzzer > lightbuzzerPtr;
typedef boost::shared_ptr< ::agv_msgs::lightbuzzer const> lightbuzzerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::lightbuzzer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::lightbuzzer_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_msgs::lightbuzzer_<ContainerAllocator1> & lhs, const ::agv_msgs::lightbuzzer_<ContainerAllocator2> & rhs)
{
  return lhs.light == rhs.light &&
    lhs.buzzer == rhs.buzzer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_msgs::lightbuzzer_<ContainerAllocator1> & lhs, const ::agv_msgs::lightbuzzer_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::lightbuzzer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::lightbuzzer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::lightbuzzer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::lightbuzzer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::lightbuzzer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::lightbuzzer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::lightbuzzer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a462c3b9113a37311f2fdfd366a4203b";
  }

  static const char* value(const ::agv_msgs::lightbuzzer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa462c3b9113a3731ULL;
  static const uint64_t static_value2 = 0x1f2fdfd366a4203bULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::lightbuzzer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/lightbuzzer";
  }

  static const char* value(const ::agv_msgs::lightbuzzer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::lightbuzzer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 light # 灯光\n"
"uint8 buzzer # 蜂鸣器\n"
;
  }

  static const char* value(const ::agv_msgs::lightbuzzer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::lightbuzzer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.light);
      stream.next(m.buzzer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lightbuzzer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::lightbuzzer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::lightbuzzer_<ContainerAllocator>& v)
  {
    s << indent << "light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light);
    s << indent << "buzzer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buzzer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_LIGHTBUZZER_H
